import snakemake
import os

configfile: "../config/localconfig.yaml"
snakemake.utils.validate(config, "./config/preformat_config.schema.yaml")

# get the environment variable for freesurfer - for use in getting access to lut's
HOME_DIR="../../"
SCRIPTS_UTIL_DIR = "../../neuroimg/format/"
ATLAS=['dk', 'destrieux']

''' USER DEFINED DIRECTORIES TO STORE FINAL DATA IN ORGANIZED SUBFOLDERS '''
COREGISTRATION_OUTPUT_DIR = os.path.join(config['finaloutput_datadir'],
                                         "{patient_id}",
                                         "coregistration")
TVB_OUTPUT_DIR = os.path.join(config['finaloutput_datadir'],
                                                "{patient_id}",
                                                "tvb")

# First rule
rule all:
    input:
        # clustered_center_points = expand(os.path.join(COREGISTRATION_OUTPUT_DIR,
        #                                '{patient_id}_elec.mat'),
        #                                  patient_id = config['patients']),
        clustered_center_points_flirt = expand(os.path.join(COREGISTRATION_OUTPUT_DIR,
                                                     '{patient_id}_native_flirt_elec_xyz.mat'),
                                            patient_id = config['patients']),
        clustered_center_points_robustreg = expand(os.path.join(COREGISTRATION_OUTPUT_DIR,
                                                             '{patient_id}_native_robustreg_elec_xyz.mat'),
                                                patient_id = config['patients']),
        clustered_center_points_lddmm = expand(os.path.join(COREGISTRATION_OUTPUT_DIR,
                                                     '{patient_id}_native_lddmm_elec_xyz.mat'),
                                                patient_id = config['patients']),
    shell:
        "echo 'done'"


"""
Rule to plot:
- parcellated nodes in space with the surface shown transparently
- surface shown transparent with different regions colored
- parcellated nodes in space with the contacts.xyz (centers) plotted
"""
rule run_clustering_algorithm_on_CTimg:
    input:
        CT_NIFTI_IMG = os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}",
                                        "CT.nii.gz"),
        brainmask_file = os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}",
                                      "nativespace-transform",
                                      "brainmask_native.mgz"),
        # list of channel points (at least 2 per electrode)
        electrode_initialization_file = os.path.join(COREGISTRATION_OUTPUT_DIR,
                                                     '{patient_id}_elec_initialize.mat'),
    output:
        clustered_center_points = os.path.join(COREGISTRATION_OUTPUT_DIR,
                                                     '{patient_id}_elec_xyz.mat'),
        clustered_center_voxels = os.path.join(COREGISTRATION_OUTPUT_DIR,
                                               '{patient_id}_elec_voxels.mat'),
        binarized_ct_volume = os.path.join(COREGISTRATION_OUTPUT_DIR,
                                           "{patient_id}_binarized_ct.nii.gz")
    shell:
        "echo 'RUNNING CLUSTERING ALGORITHM';"
        ""

rule convert_coords_to_native_T1:
    input:
        # mapping matrix for post to pre in T1
        MAPPING_FILE_ORIG = os.path.join(COREGISTRATION_OUTPUT_DIR,
                                    "fsl_ct-to-pre-t1_omat.txt"),
        output_registration_file = os.path.join(COREGISTRATION_OUTPUT_DIR,
                                                "CT_in_pre_T1_robustregistration.txt"),
        LDDMM_MAPPED_FILE=os.path.join(COREGISTRATION_OUTPUT_DIR,
                                        "ldmm_ct-to-pre-t1_omat.txt"),
        clustered_center_points = os.path.join(COREGISTRATION_OUTPUT_DIR,
                                                     '{patient_id}_elec_xyz.mat'),
        clustered_center_voxels = os.path.join(COREGISTRATION_OUTPUT_DIR,
                                               '{patient_id}_elec_voxels.mat'),
    output:
        clustered_center_points_flirt = os.path.join(COREGISTRATION_OUTPUT_DIR,
                                                     '{patient_id}_native_flirt_elec_xyz.mat'),
        clustered_center_points_robustreg = os.path.join(COREGISTRATION_OUTPUT_DIR,
                                                             '{patient_id}_native_robustreg_elec_xyz.mat'),
        clustered_center_points_lddmm = os.path.join(COREGISTRATION_OUTPUT_DIR,
                                                     '{patient_id}_native_lddmm_elec_xyz.mat'),
        clustered_center_voxels = os.path.join(COREGISTRATION_OUTPUT_DIR,
                                               '{patient_id}_native_elec_voxels.mat'),
    shell:
        "img2imgcoord -mm -src {input.clustered_center_points} \
                    -dest {output.clustered_center_points} -xfm {input.output_registration_file};"
        "img2imgcoord -mm -src {input.clustered_center_points_robustreg} \
                            -dest {output.clustered_center_points_flirt} -xfm {input.MAPPING_FILE_ORIG};"
        "img2imgcoord -mm -src {input.clustered_center_points} \
                            -dest {output.clustered_center_points_lddmm} -xfm {input.LDDMM_MAPPED_FILE};"