import snakemake
import os
"""
export SUBJECTS_DIR=~/hdd/data/neuroimaging/freesurfer_output/

A snakemake file for running reconstructions on the neuroimaging data.

snakemake --dag | dot -Tpdf > dag_neuroimaging_pipeline_reconstruction.pdf

Runs tests to ensure data is all in the corresponding format:

0. patient (raw)
    - premri
        - (list) dicoms
    - postct
        - (list) dicoms
    - dti
        - (list) dicoms

0b. freesurfer_output / reconstruction_output
    - patient (reconstruction)
        - (tree) files
    - finaloutput_datadir (stores all files we want to use in the next step)
    - success_file_flag.txt
    - stick all raw file

1. patient (processed)
    - mri
        - nifti volume image
    - ct
        - nifti volume image
    - dti (optional)
        - nifti volume image
    - elec
        - ct_in_t1_volume image
        - chans_xyz.txt
    - surface (how to draw out the brain; )
        - triangles.txt
        - vertices.txt
        - normals.txt
        - voxel_xyz.txt
    - parcellation (depends on atlas)
        -<atlas_1>
            - region_mapping_cort_<atlas>.txt
            - region_mapping_subcort_<atlas>.txt
            - region_centres_<atlas>.txt
            - region_areas_<atlas>.txt
            - region_cortical_<atlas>.txt
            - region_average_orientations_<atlas>.txt
            - label_in_T1_<atlas> volume image (maps all voxels to an atlas region)
    - connectome (depends on atlas)
        - tract_lengths_<atlas>.txt
        - weights_<atlas>.txt
        - gain_mat_<atlas>.txt (how to project regional activity -> sensor space | mainly for TVB)
    - seeg
        - edf
        - fif
    - scalp
        - edf
        - fif
    - clinical
        - ez_hypothesis_chans.txt
        - ez_hypothesis_<atlas>.txt
        - stores clinical metadata
        - PPTs related
    TUTORIAL_FILE.TXT

If this doesn't work off the bat, make sure you explicitly set SUBJECTS_DIR
"""

configfile: "./config/localconfig.yaml"
snakemake.utils.validate(config, "./config/preformat_config.schema.yaml")

# get the environment variable for freesurfer - for use in getting access to lut's
FREESURFER_HOME = os.getenv("FREESURFER_HOME") or ''
MRTRIX3_HOME = os.getenv("MRTRIX3_HOME") or ''
HOME_DIR="../../"
SCRIPTS_UTIL_DIR = "../../neuroimg/format/"
ATLAS=['dk', 'destrieux']

''' USER DEFINED DIRECTORIES TO STORE FINAL DATA IN ORGANIZED SUBFOLDERS '''
FS_PATIENT_OUTPUT_DIR = os.path.join(config['fs_outputdatadir'],
                                     "{patient_id}")
PATIENT_OUTPUT_DIR = os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}")
COREGISTRATION_OUTPUT_DIR = os.path.join(config['finaloutput_datadir'],
                                         "{patient_id}",
                                         "coregistration")
TVB_OUTPUT_DIR = os.path.join(config['finaloutput_datadir'],
                                                "{patient_id}",
                                                "tvb")
parc = "aparc.a2009s"
aa = "aparc+aseg"
sval = "pial"
hemispheres = ['lh', 'rh']
resamp_target = "fsaverage5"

# First rule
rule all:
    input:
        # output_dk_voxel_file = expand(os.path.join(config["finaloutput_datadir"],
        #                                            "{patient_id}", "voxel",
        #                                "voxels_in_T1_volume_dk.txt"),
        #                                 patient_id=config['patients']),
        # output_destrieux_voxel_file = expand(os.path.join(config["finaloutput_datadir"],
        #                                            "{patient_id}", "voxel",
        #                                             "voxels_in_T1_volume_destrieux.txt"),
        #                               patient_id=config['patients']),
        # master output file
        output_file=expand(os.path.join(TVB_OUTPUT_DIR,
                                        "connectivity_{atlas}.zip"),
                           patient_id=config['patients'], atlas=ATLAS),
        # label in source lut volume
        label_volume_file = expand(os.path.join(config['finaloutput_datadir'],
                                                "{patient_id}",
                                                "tvb",
                                                 "label_in_T1_volume.{atlas}.nii.gz"),
                                            patient_id=config['patients'], atlas=ATLAS),
        # annotation subsampled file
        output_subsampled_annotfile = expand(os.path.join(PATIENT_OUTPUT_DIR,
                                                        "{hemisphere}."+parc+".annot."+resamp_target),
                                             hemisphere=hemispheres,
                                             patient_id=config['patients']),
        # surface subsampled file
        output_subsampled_surffile = expand(os.path.join(PATIENT_OUTPUT_DIR,
                                                        "{hemisphere}."+sval+"."+resamp_target),
                                            hemisphere = hemispheres,
                                            patient_id=config['patients']),
        CT_IN_T1_NIFTI_IMG_ORIG=expand(os.path.join(COREGISTRATION_OUTPUT_DIR,
                                               "CT_IN_T1.mgz"),
                                         patient_id=config['patients']),
        # mapping matrix for CT to T1
        MAPPING_FILE=expand(os.path.join(COREGISTRATION_OUTPUT_DIR,
                                        "fsl_ct-to-t1_omat.txt"),
                                    patient_id=config['patients']),
        # OUTPUT REGISTRATION FILES FROM FLIRT, ROBUST_REGISTER AND LDMM
        OUTPUT_ROBUST_REGISTRATION_FILE = expand(os.path.join(COREGISTRATION_OUTPUT_DIR,
                                        "CT_in_pre_T1_robustregistration.mgz"),
                                         patient_id=config['patients']),
        LDDMM_MAPPED_FILE=expand(os.path.join(COREGISTRATION_OUTPUT_DIR,
                                        "ldmm_ct-to-pre-t1_omat.txt"),
                                    patient_id=config['patients']),
    shell:
        "echo 'done'"

"""
Rule for converting .dicom -> .nifti

Assumes user has premri and postct with DTI being optional, as this is not standard clinical procedure
in the USA.
"""
rule dicom_to_nifti:
    params:
        CT_FOLDER=os.path.join(config['rawdatadir'],
                                        "{patient_id}", 'postct'),
        MRI_FOLDER=os.path.join(config['rawdatadir'],
                                        "{patient_id}", 'premri'),
    output:
        CT_NIFTI_IMG=os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}",
                                         "CT.nii.gz"),
        MRI_NIFTI_IMG=os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}",
                                          "T1.nii.gz")
    shell:
        "mrconvert {params.CT_FOLDER} {output.CT_NIFTI_IMG};"
        "mrconvert {params.MRI_FOLDER} {output.MRI_NIFTI_IMG};"

"""
Rule to pre-setup the freesurfer output directory with the orig.mgz file
"""
rule pre_reconstruction:
    input:
        MRI_NIFTI_IMG=os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}",
                                          "T1.nii.gz")
    params:
        patient="{patient_id}", # patient_id=config['patients']),
        SUBJECTS_DIR=os.path.join(config['fs_outputdatadir']),
    output:
        outmgz_file=os.path.join(config['fs_outputdatadir'],
                                     "{patient_id}",
                                    "mri/orig",
                                     "001.mgz")
    shell:
        "export SUBJECTS_DIR={params.SUBJECTS_DIR}; \
            SUBJECTS_DIR={params.SUBJECTS_DIR};"
        "mri_convert {params.MRI_NIFTI_IMG} {output.outmgz_file};"

"""
Rule for reconstructions .nifti -> output files.

Since Freesurfer creates the directory on its own + snakemake does too,
I instead specify an output as a "temporary" flagger file that will let snakemake
know that reconstruction was completed.
"""
rule reconstruction:
    input:
        MRI_NIFTI_IMG=os.path.join(PATIENT_OUTPUT_DIR,
                                          "T1.nii.gz")
    params:
        patient="{patient_id}",
        SUBJECTS_DIR=os.path.join(config['fs_outputdatadir']),
    output:
        outsuccess_file=os.path.join(config['fs_outputdatadir'],
                                "{patient_id}_recon_success.txt")
    shell:
        "export SUBJECTS_DIR={params.SUBJECTS_DIR}; \
            SUBJECTS_DIR={params.SUBJECTS_DIR};"
        "recon-all -i {input.MRI_NIFTI_IMG} \
            -subjid {params.patient} -all \
            -parallel -openmp 4;"
        "touch {output.outsuccess_file}"

"""
Rule for extracting the subcortical regions

- creates a new folder aseg2srf inside the fs_output data directory
- c/p this into our final result directory
"""
rule create_subcortical_volume:
    input:
        aseg_output_file=os.path.join(PATIENT_OUTPUT_DIR,
                                    "aseg.mgz"),
        norm_output_file=os.path.join(PATIENT_OUTPUT_DIR,
                                    "norm.mgz"),
    params:
        new_FREESURFER_HOME=PATIENT_OUTPUT_DIR,
        subj_dir=os.path.join(config['fs_outputdatadir']),
        patient="{patient_id}",
        scripts_dir=SCRIPTS_UTIL_DIR,
    output:
        subcort_success_flag_file=os.path.join(PATIENT_OUTPUT_DIR,
                                            "{patient_id}_subcort_success.txt"),
    shell:
        # generate subcortical region volume bounding surfaces
        "export SUBJECTS_DIR={params.subj_dir}; \
        SUBJECTS_DIR={params.subj_dir}; \
	    {params.scripts_dir}/aseg2srf -s {params.patient};"
        "cp -r {params.subj_dir}/{params.patient}/aseg2srf/ {params.new_FREESURFER_HOME}/aseg2srf;"
        "touch {output.subcort_success_flag_file};"

"""
Rule for converting the pial surfaces to ascii data, so that it is readable by python/matlab.
"""
rule convert_pial_surface_files:
    input:
        lhpial=os.path.join(PATIENT_OUTPUT_DIR,
                            "lh.pial"),
        rhpial=os.path.join(PATIENT_OUTPUT_DIR,
                            "rh.pial"),
        lhpial_native = os.path.join(PATIENT_OUTPUT_DIR,
                              "lh_native.pial"),
        rhpial_native = os.path.join(PATIENT_OUTPUT_DIR,
                              "rh_native.pial"),
    output:
        lhpial=os.path.join(PATIENT_OUTPUT_DIR,
                            "lh.pial.asc"),
        rhpial=os.path.join(PATIENT_OUTPUT_DIR,
                            "rh.pial.asc"),
        lhpial_native = os.path.join(PATIENT_OUTPUT_DIR,
                              "lh_native.asc"),
        rhpial_native = os.path.join(PATIENT_OUTPUT_DIR,
                              "rh_native.asc"),
    shell:
        "mris_convert {input.lhpial} {output.lhpial};"
        "mris_convert {input.rhpial} {output.rhpial};"
        "mris_convert {input.lhpial_native} {output.lhpial_native};"
        "mris_convert {input.rhpial_native} {output.rhpial_native};"


# """
# Rule for coregistering .nifit images -> .nifti for T1 space
#
# E.g. useful for CT, and DTI images to be coregistered
# """
# rule coregister_ct_to_t1:
#     input:
#         # output_subsampled_file=os.path.join(config['fs_outputdatadir'],
#         #                         config['finaloutput_datadir'],
#         #                         "{patient_id}",
#         #                         "subsampled_T1.mgz"),
#         CT_NIFTI_IMG_ORIG = os.path.join(config['finaloutput_datadir'],
#                                     "{patient_id}",
#                                     "CT.nii.gz"),
#         MRI_NIFTI_IMG_ORIG = os.path.join(config['finaloutput_datadir'],
#                                      "{patient_id}",
#                                      "T1.nii.gz"),
#         # CT_NIFTI_IMG=os.path.join(config['finaloutput_datadir'],
#         #                                 "{patient_id}",
#         #                                 "converted_coord_system",
#         #                                  "CT.RAS.RO.nii.gz"),
#         # MRI_NIFTI_IMG=os.path.join(config['finaloutput_datadir'],
#         #                                 "{patient_id}",
#         #                                 "converted_coord_system",
#         #                                   "T1.RAS.RO.nii.gz")
#     output:
#         CT_IN_T1_NIFTI_IMG_ORIG_gz=os.path.join(config['finaloutput_datadir'],
#                                             "{patient_id}",
#                                             "coregistration",
#                                          "CT_IN_T1.nii.gz"),
#         # mapping matrix for CT to T1
#         MAPPING_FILE_ORIG = os.path.join(config['finaloutput_datadir'],
#                                     "{patient_id}",
#                                     "coregistration",
#                                     "fsl_ct-to-t1_omat.txt"),
#         # CT_IN_T1_NIFTI_IMG=os.path.join(config['finaloutput_datadir'],
#         #                                     "{patient_id}",
#         #                                     "coregistration",
#         #                                  "CT_IN_T1.RAS.RO.nii.gz"),
#         # # mapping matrix for CT to T1
#         # MAPPING_FILE=os.path.join(config['finaloutput_datadir'],
#         #                                 "{patient_id}",
#         #                                 "coregistration",
#         #                                 "fsl_ct-to-t1_omat.RAS.RO.txt"),
#     shell:
#         # "flirt -in {input.CT_NIFTI_IMG} -ref {input.MRI_NIFTI_IMG} -omat {output.MAPPING_FILE} -out {output.CT_IN_T1_NIFTI_IMG};"
#         "flirt -in {input.CT_NIFTI_IMG_ORIG} -ref {input.MRI_NIFTI_IMG_ORIG} -omat {output.MAPPING_FILE_ORIG} -out {output.CT_IN_T1_NIFTI_IMG_ORIG_gz};"

"""
Rule to convert nifti to MNI space image volumes.
"""
rule convert_to_mgz:
    input:
        CT_NIFTI_IMG_ORIG = os.path.join(PATIENT_OUTPUT_DIR,
                                    "CT.nii.gz"),
        PREMRI_NIFTI_IMG_ORIG = os.path.join(PATIENT_OUTPUT_DIR,
                                     "T1.nii.gz"),
    output:
        CT_NIFTI_IMG_MGZ = os.path.join(COREGISTRATION_OUTPUT_DIR,
                                    "CT.mgz"),
        PREMRI_NIFTI_IMG_MGZ = os.path.join(COREGISTRATION_OUTPUT_DIR,
                                     "preT1.mgz"),
    shell:
        "mrconvert {input.PREMRI_NIFTI_IMG_ORIG} {output.PREMRI_NIFTI_IMG_MGZ};"
        "mrconvert {input.CT_NIFTI_IMG_ORIG} {output.CT_NIFTI_IMG_MGZ};"


rule normalize_image:
    input:
        CT_NIFTI_IMG_MGZ = os.path.join(COREGISTRATION_OUTPUT_DIR,
                                             "CT.mgz"),
        PREMRI_NIFTI_IMG_MGZ = os.path.join(PATIENT_OUTPUT_DIR,
                                            "T1.mgz"),
    output:
        CT_IMG_MGZ_norm = os.path.join(COREGISTRATION_OUTPUT_DIR,
                                             "CT_normalize.mgz"),
        PREMRI_IMG_MGZ_norm = os.path.join(COREGISTRATION_OUTPUT_DIR,
                                            "preT1_normalize.mgz"),
    shell:
        "cp {input.PREMRI_NIFTI_IMG_MGZ} {output.PREMRI_IMG_MGZ_norm};"
        "mri_normalize {input.CT_NIFTI_IMG_MGZ} {output.CT_IMG_MGZ_norm};"
        "mri_convert -c {output.CT_IMG_MGZ_norm} {output.CT_IMG_MGZ_norm};"



"""
Rule for coregistering .nifit images -> .nifti for T1 space

E.g. useful for CT, and DTI images to be coregistered
"""
rule coregistert1_ct_to_pre:
    input:
        PREMRI_NIFTI_IMG_MGZ = os.path.join(COREGISTRATION_OUTPUT_DIR,
                                            "preT1_normalize.mgz"),
        CT_NIFTI_IMG_MGZ = os.path.join(COREGISTRATION_OUTPUT_DIR,
                                             "CT_normalize.mgz"),
    output:
        CT_IN_PRE_NIFTI_IMG_ORIGgz = os.path.join(COREGISTRATION_OUTPUT_DIR,
                                                      "CT_IN_T1.mgz"),
        # mapping matrix for post to pre in T1
        MAPPING_FILE_ORIG = os.path.join(COREGISTRATION_OUTPUT_DIR,
                                    "fsl_ct-to-pre-t1_omat.txt"),
    shell:
        "flirt -in {input.CT_NIFTI_IMG_MGZ} \
                            -ref {input.PREMRI_NIFTI_IMG_MGZ} \
                            -omat {output.MAPPING_FILE_ORIG} \
                            -out {output.CT_IN_PRE_NIFTI_IMG_ORIGgz};"

"""
Rule for robust registration of two volumes within two volumes
"""
rule robust_registration_ct_to_pre:
    input:
        PREMRI_NIFTI_IMG_MGZ = os.path.join(COREGISTRATION_OUTPUT_DIR,
                                     "preT1_normalize.mgz"),
        CT_NIFTI_IMG_MGZ = os.path.join(COREGISTRATION_OUTPUT_DIR,
                                     "CT_normalize.mgz"),
    output:
        output_registration_file = os.path.join(COREGISTRATION_OUTPUT_DIR,
                                                "CT_in_pre_T1_robustregistration.txt"),
        output_registration_image = os.path.join(COREGISTRATION_OUTPUT_DIR,
                                                 "CT_in_pre_T1_robustregistration.mgz"),
        weights_file = os.path.join(COREGISTRATION_OUTPUT_DIR,
                                                "CT_in_pre_T1_outlierweights.mgz")
    shell:
        "mri_robust_register --mov {input.CT_NIFTI_IMG_MGZ} \
                            --dst {input.PREMRI_NIFTI_IMG_MGZ} \
                            --lta {output.output_registration_file} \
                            --mapmovhdr {output.output_registration_image} \
                            -weights {output.weights_file} \
                            --satit \
                            --iscale;"

"""
Rule for running lddmm algorithm script using tensorflow
"""
rule lddmm_registration_ct_to_pre:
    input:
        PREMRI_NIFTI_IMG_MGZ = os.path.join(COREGISTRATION_OUTPUT_DIR,
                                            "preT1_normalize.mgz"),
        POSTMRI_NIFTI_IMG_MGZ = os.path.join(COREGISTRATION_OUTPUT_DIR,
                                             "CT_normalize.mgz"),
    output:
        LDDMM_MAPPED_FILE=os.path.join(COREGISTRATION_OUTPUT_DIR,
                                        "ldmm_ct-to-pre-t1_omat.txt"),
        output_registration_image = os.path.join(COREGISTRATION_OUTPUT_DIR,
                                        "CT_in_pre_T1_lddmm.mgz"),
    shell:
        "echo 'need to implement.';"


"""
Rule for extracting surface geometry information from the
MRI volumes
"""
rule create_structural_dataset:
    input:
        subcort_success_flag_file=os.path.join(PATIENT_OUTPUT_DIR,
                                    "{patient_id}_subcort_success.txt"),
        lhpial=os.path.join(PATIENT_OUTPUT_DIR,
                            "lh.pial.asc"),
        rhpial=os.path.join(PATIENT_OUTPUT_DIR,
                            "rh.pial.asc"),
        lhlabel=os.path.join(PATIENT_OUTPUT_DIR,
                            "lh.aparc.annot"),
        rhlabel=os.path.join(PATIENT_OUTPUT_DIR,
                            "rh.aparc.annot"),
        label_volume_file=os.path.join(TVB_OUTPUT_DIR,
                                "label_in_T1_volume.{atlas}.nii.gz"),
    params:
        subjdir=os.path.join(config['fs_outputdatadir'], "{patient_id}"),
        output_surface_dir=TVB_OUTPUT_DIR,
        lut_fs=os.path.join(FREESURFER_HOME, "FreeSurferColorLUT.txt"),
        lut_target=os.path.join(MRTRIX3_HOME, "share/mrtrix3/labelconvert/fs_default.txt"),
        scripts_dir=os.path.join(SCRIPTS_UTIL_DIR)
    output:
        output_file=os.path.join(TVB_OUTPUT_DIR,
                                "connectivity_{atlas}.zip")
    shell:
        "echo 'RUNNING CREATION OF FINAL FILES...'; \
        cd {params.scripts_dir};"

        "touch {output.output_file};"
        # "python -m create_surface_files {params.subjdir} \
        #                                 {params.lut_fs} \
        #                                 {params.lut_target} \
        #                                 {output.output_file} \
        #                                 {params.output_surface_dir};"

rule clean_structural_dataset:
    params:
        datadir = os.path.join(config['finaloutput_datadir'],
                               'tvb')
    shell:
        "rm {params.datadir}/*"

rule convert_coordinate_system:
    input:
        raw_ct_file = os.path.join(PATIENT_OUTPUT_DIR,
                                         "CT.nii.gz"),
        raw_mri_file = os.path.join(PATIENT_OUTPUT_DIR,
                                          "T1.nii.gz"),
        mgz_mri_file = os.path.join(PATIENT_OUTPUT_DIR,
                                        "T1.mgz"),
        desikan_orig_file=os.path.join(PATIENT_OUTPUT_DIR,
                               "aparc.a2009s+aseg.mgz"),
        destrieux_orig_file = os.path.join(PATIENT_OUTPUT_DIR,
                                   "aparc.a2009s+aseg.mgz"),
        talairach_transform_file = os.path.join(PATIENT_OUTPUT_DIR,
                                        "transforms/talairach.xfm"),
    output:
        ras_label_volume=os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}",
                                      "converted_coord_system",
                                        "label_{atlas}.RAS.nii.gz"),
        tal_label_volume = os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}",
                                        "converted_coord_system",
                                        "label_{atlas}.TAL.nii.gz"),
        ras_std_label_volume=os.path.join(config['finaloutput_datadir'],
                                "{patient_id}",
                                "converted_coord_system",
                                "label_{atlas}.RAS.RO.nii.gz"),
        tal_std_label_volume = os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}",
                                        "converted_coord_system",
                                        "label_{atlas}.TAL.RO.nii.gz"),
    run:
        if wildcards.atlas == "dk":
            shell("echo 'Running on desikan atlas!';")
            "echo 'mri_convert -rt nearest --out_orientation RAS {input.desikan_orig_file} \
                                                            {output.ras_label_volume}';"
            shell("mri_convert -rt nearest --out_orientation RAS {input.desikan_orig_file} \
                                                            {output.ras_label_volume};")
            shell("mri_convert {input.desikan_orig_file} --apply_transform {input.talairach_transform_file} -oc 0 0 0 {output.tal_label_volume};")

        elif wildcards.atlas == "destrieux":
            shell("echo 'Running on destrieux atlas!'")
            shell("mri_convert -rt nearest --out_orientation RAS {input.destrieux_orig_file} \
                                                            {output.ras_label_volume};")
            shell("mri_convert {input.destrieux_orig_file} --apply_transform {input.talairach_transform_file} -oc 0 0 0 {output.tal_label_volume};")

        shell("fslreorient2std  {output.ras_label_volume} {output.ras_std_label_volume};")
        shell("fslreorient2std {output.tal_label_volume} {output.tal_std_label_volume};")

"""
Rule for converting labels in one volume to another labeling system.

Used for converting FS's lookup table to flirt's lookuptable, which is easier to read.

Rule for creating a label volume file that is mapped
in our simple space of FS (0-83 or 0-255) vs the unsequential mappings.

Makes things simpler to analyze under one LUT.
"""
rule create_label_in_mri_volume:
    input:
        ras_std_label_volume=os.path.join(PATIENT_OUTPUT_DIR,
                                "converted_coord_system",
                                "label_{atlas}.RAS.RO.nii.gz")
    params:
        lut_fs = os.path.join(FREESURFER_HOME, "FreeSurferColorLUT.txt"),
        lut_target = os.path.join(MRTRIX3_HOME, "share/mrtrix3/labelconvert/fs_default.txt")
    output:
        label_volume_file=os.path.join(TVB_OUTPUT_DIR,
                                "label_in_T1_volume.{atlas}.nii.gz")
    shell:
        "labelconvert {input.ras_std_label_volume} \
                    {params.lut_fs} \
                    {params.lut_target} \
                    {output.label_volume_file};"


"""
Rule for converting labeled volume image from reconstruction to a user-friendly file
that is labeled voxel per voxel with a brain index region.
"""
rule convert_voxel_labeling:
    input:
        desikan_orig_file = os.path.join(PATIENT_OUTPUT_DIR,
                                        "aparc+aseg.mgz"),
        destrieux_orig_file = os.path.join(PATIENT_OUTPUT_DIR,
                                        "aparc.a2009s+aseg.mgz")
    params:
        lut_fs = os.path.join(FREESURFER_HOME, "FreeSurferColorLUT.txt"),
        lut_target = os.path.join(MRTRIX3_HOME, "share/mrtrix3/labelconvert/fs_default.txt")
    output:
        output_dk_voxel_file = os.path.join(PATIENT_OUTPUT_DIR,
                                            "voxel",
                                            "voxels_in_T1_volume_dk.txt"),
        output_destrieux_voxel_file = os.path.join(PATIENT_OUTPUT_DIR,
                                                   "voxel",
                                                   "voxels_in_T1_volume_destrieux.txt")
    shell:
        # "cd {params.home_dir};"
        "python ./create_volume_voxel_files.py {input.desikan_orig_file} " \
                                            "{input.destrieux_orig_file} " \
                                            "{params.lut_target} " \
                                            "{output.output_dk_voxel_file} " \
                                            "{output.output_destrieux_voxel_file};"

"""
Help register images from conformed -> original native space

and also from original native space -> conformed
"""
rule register_conformed_to_orig:
    input:
        rawavg_file = os.path.join(PATIENT_OUTPUT_DIR,
                                        "rawavg.mgz"),
        t1_mgz_file = os.path.join(PATIENT_OUTPUT_DIR,
                           "T1.mgz"),
    output:
        registration_native_file = os.path.join(PATIENT_OUTPUT_DIR,
                                                "nativespace-transform",
                                                "register.native.dat"),
        registration_conformed_file = os.path.join(PATIENT_OUTPUT_DIR,
                                                "nativespace-transform",
                                                "register.conformed.dat")
    shell:
        "tkregister2 --mov {input.rawavg_file} --targ {input.t1_mgz_file} \
                --reg {output.registration_native_file} --noedit --regheader;"
        "tkregister2 --mov {input.t1_mgz_file} --targ {input.rawavg_file} \
                --reg {output.registration_conformed_file} --noedit --regheader;"

"""
Helps map back image volumes, brain masks to their native space.
"""
rule convert_to_anatomical_space:
    input:
        brainmask_file = os.path.join(PATIENT_OUTPUT_DIR,
                                      "brainmask.mgz"),
        rawavg_file = os.path.join(PATIENT_OUTPUT_DIR,
                                        "rawavg.mgz"),
        aseg_output_file = os.path.join(PATIENT_OUTPUT_DIR,
                                        "aseg.mgz"),
        wm_output_file = os.path.join(PATIENT_OUTPUT_DIR,
                                      "wm.mgz"),
        aparc_atlas_aseg_file = os.path.join(PATIENT_OUTPUT_DIR,
                                             "aparc.a2009s+aseg.mgz"),
        aparc_dkatlas_aseg_file = os.path.join(PATIENT_OUTPUT_DIR,
                                            "aparc+aseg.mgz"),
        lhpial = os.path.join(PATIENT_OUTPUT_DIR,
                              "lh.pial"),
        rhpial = os.path.join(PATIENT_OUTPUT_DIR,
                              "rh.pial"),
        lhlabel = os.path.join(PATIENT_OUTPUT_DIR,
                               "lh.aparc.annot"),
        rhlabel = os.path.join(PATIENT_OUTPUT_DIR,
                               "rh.aparc.annot"),
        registration_native_file = os.path.join(PATIENT_OUTPUT_DIR,
                                                "nativespace-transform",
                                                "register.native.dat")
    output:
        brainmask_file = os.path.join(PATIENT_OUTPUT_DIR,
                                      "nativespace-transform",
                                      "brainmask_native.mgz"),
        aseg_output_file = os.path.join(PATIENT_OUTPUT_DIR,
                                        "nativespace-transform",
                                        "subcortical_native.mgz"),
        wm_output_file = os.path.join(PATIENT_OUTPUT_DIR,
                                      "nativespace-transform",
                                      "wm_native.mgz"),
        aparc_atlas_aseg_file = os.path.join(PATIENT_OUTPUT_DIR,
                                             "nativespace-transform",
                                             "destrieux_native.mgz"),
        aparc_dkatlas_aseg_file = os.path.join(PATIENT_OUTPUT_DIR,
                                               "nativespace-transform",
                                            "desikan_native.mgz"),
        lhpial = os.path.join(PATIENT_OUTPUT_DIR,
                              "lh_native.pial"),
        rhpial = os.path.join(PATIENT_OUTPUT_DIR,
                              "rh_native.pial"),
    shell:
        # convert volume to its previous volume, e.g. brian mask
        "mri_vol2vol --mov {input.brainmask_file} --targ {input.rawavg_file} \
                        --regheader --o {output.brainmask_file} --no-save-reg;"

        # convert label volumes -> native space
        "mri_label2vol --seg {input.aseg_output_file} --temp {input.rawavg_file} \
                        --o {output.aseg_output_file} --regheader {input.aseg_output_file};"
        "mri_label2vol --seg {input.wm_output_file} --temp {input.rawavg_file} \
                                --o {output.wm_output_file} --regheader {input.wm_output_file};"
        "mri_label2vol --seg {input.aparc_atlas_aseg_file} --temp {input.rawavg_file} \
                                --o {output.aparc_atlas_aseg_file} --regheader {input.aparc_atlas_aseg_file};"
        "mri_label2vol --seg {input.aparc_dkatlas_aseg_file} --temp {input.rawavg_file} \
                                --o {output.aparc_dkatlas_aseg_file} --regheader {input.aparc_dkatlas_aseg_file};"

        # convert surfaces to the native space
        "mri_surf2surf --sval-xyz pial --reg {input.registration_native_file} {input.rawavg_file} \
                            --tval {output.lhpial} --tval-xyz --hemi lh --s subjectname;"
        "mri_surf2surf --sval-xyz pial --reg {input.registration_native_file} {input.rawavg_file} \
                    --tval {output.rhpial} --tval-xyz {output.rhpial} --hemi rh --s subjectname;"

"""
Rule to copy all necessary reconstruction files to a temporary directory,
so that we can explicitly say which files are being analyzed/used.

Add here files to copy them to the directory that we allow scripts to draw from.
"""
rule copy_reconstruction_files:
    input:
        outsuccess_file=os.path.join(config['fs_outputdatadir'],
                                "{patient_id}_recon_success.txt")
    params:
        lhpial=os.path.join(config['fs_outputdatadir'],
                            "{patient_id}",
                            "surf/lh.pial"),
        rhpial=os.path.join(config['fs_outputdatadir'],
                            "{patient_id}",
                            "surf/rh.pial"),
        lhlabel=os.path.join(config['fs_outputdatadir'],
                            "{patient_id}",
                            "label/lh.aparc.annot"),
        rhlabel=os.path.join(config['fs_outputdatadir'],
                            "{patient_id}",
                            "label/rh.aparc.annot"),
        aseg_output_file = os.path.join(config['fs_outputdatadir'],
                                        "{patient_id}",
                                        "mri/aseg.mgz"),
        norm_output_file = os.path.join(config['fs_outputdatadir'],
                                        "{patient_id}",
                                        "mri/norm.mgz"),
        aparc_dkatlas_aseg_file = os.path.join(config['fs_outputdatadir'],
                                                 "{patient_id}",
                                                "mri/aparc+aseg.mgz"),
        aparc_atlas_aseg_file = os.path.join(config['fs_outputdatadir'],
                                                 "{patient_id}",
                                                "mri/aparc.a2009s+aseg.mgz"),
        t1_mgz_file = os.path.join(config['fs_outputdatadir'],
                        "{patient_id}",
                        "mri/T1.mgz"),
        brainmask_file = os.path.join(config['fs_outputdatadir'],
                                      "{patient_id}",
                                      "mri/brainmask.mgz"),
        rawavg_file = os.path.join(config['fs_outputdatadir'],
                                      "{patient_id}",
                                      "mri/rawavg.mgz"),
        wm_output_file = os.path.join(config['fs_outputdatadir'],
                                      "{patient_id}",
                                      "mri/wm.mgz"),
        talairach_transform_file = os.path.join(config['fs_outputdatadir'],
                                                "{patient_id}",
                                                "mri/transforms/talairach.xfm")
    output:
        lhpial=os.path.join(PATIENT_OUTPUT_DIR,
                            "lh.pial"),
        rhpial=os.path.join(PATIENT_OUTPUT_DIR,
                            "rh.pial"),
        lhlabel=os.path.join(PATIENT_OUTPUT_DIR,
                            "lh.aparc.annot"),
        rhlabel=os.path.join(PATIENT_OUTPUT_DIR,
                            "rh.aparc.annot"),
        aseg_output_file = os.path.join(PATIENT_OUTPUT_DIR,
                                        "aseg.mgz"),
        norm_output_file = os.path.join(PATIENT_OUTPUT_DIR,
                                        "norm.mgz"),
        aparc_atlas_aseg_file = os.path.join(PATIENT_OUTPUT_DIR,
                                             "aparc.a2009s+aseg.mgz"),
        aparc_dkatlas_aseg_file = os.path.join(PATIENT_OUTPUT_DIR,
                                            "aparc+aseg.mgz"),
        t1_mgz_file = os.path.join(PATIENT_OUTPUT_DIR,
                                        "T1.mgz"),
        brainmask_file = os.path.join(PATIENT_OUTPUT_DIR,
                                      "brainmask.mgz"),
        wm_output_file = os.path.join(PATIENT_OUTPUT_DIR,
                                      "wm.mgz"),
        rawavg_file = os.path.join(PATIENT_OUTPUT_DIR,
                                   "rawavg.mgz"),
        talairach_transform_file = os.path.join(PATIENT_OUTPUT_DIR,
                                                "transforms/talairach.xfm")
    shell:
        "cp {params.lhpial} {output.lhpial};"
        "cp {params.rhpial} {output.rhpial};"
        "cp {params.lhlabel} {output.lhlabel};"
        "cp {params.rhlabel} {output.rhlabel};"
        "cp {params.aseg_output_file} {output.aseg_output_file};"
        "cp {params.norm_output_file} {output.norm_output_file};"
        "cp {params.aparc_atlas_aseg_file} {output.aparc_atlas_aseg_file};"
        "cp {params.aparc_dkatlas_aseg_file} {output.aparc_dkatlas_aseg_file};"
        "cp {params.t1_mgz_file} {output.t1_mgz_file};"

        "cp {params.brainmask_file} {output.brainmask_file};"
        "cp {params.rawavg_file} {output.rawavg_file};"
        "cp {params.wm_output_file} {output.wm_output_file};"

        "cp {params.talairach_transform_file} {output.talairach_transform_file};"
