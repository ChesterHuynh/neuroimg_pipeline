import snakemake
import os
"""
export SUBJECTS_DIR=~/hdd/data/neuroimaging/freesurfer_output/

A snakemake file for running reconstructions on the neuroimaging data.

snakemake --dag | dot -Tpdf > dag_neuroimaging_pipeline.pdf

Runs tests to ensure data is all in the corresponding format:

0. patient (raw)
    - premri
        - (list) dicoms
    - postct
        - (list) dicoms
    - dti
        - (list) dicoms

0b. freesurfer_output / reconstruction_output
    - patient (reconstruction)
        - (tree) files
    - finaloutput_datadir (stores all files we want to use in the next step)
    - success_file_flag.txt
    - stick all raw file

1. patient (processed)
    - mri
        - nifti volume image
    - ct
        - nifti volume image
    - dti (optional)
        - nifti volume image
    - elec
        - ct_in_t1_volume image
        - chans_xyz.txt
    - surface (how to draw out the brain; )
        - triangles.txt
        - vertices.txt
        - normals.txt
        - voxel_xyz.txt
    - parcellation (depends on atlas)
        -<atlas_1>
            - region_mapping_cort_<atlas>.txt
            - region_mapping_subcort_<atlas>.txt
            - region_centres_<atlas>.txt
            - region_areas_<atlas>.txt
            - region_cortical_<atlas>.txt
            - region_average_orientations_<atlas>.txt
            - label_in_T1_<atlas> volume image (maps all voxels to an atlas region)
    - connectome (depends on atlas)
        - tract_lengths_<atlas>.txt
        - weights_<atlas>.txt
        - gain_mat_<atlas>.txt (how to project regional activity -> sensor space | mainly for TVB)
    - seeg
        - edf 
        - fif
    - scalp
        - edf
        - fif
    - clinical
        - ez_hypothesis_chans.txt
        - ez_hypothesis_<atlas>.txt
        - stores clinical metadata
        - PPTs related
    TUTORIAL_FILE.TXT

If this doesn't work off the bat, make sure you explicitly set SUBJECTS_DIR
"""

configfile: "./config/localconfig.yaml"
snakemake.utils.validate(config, "../config/preformat_config.schema.yaml")

# get the environment variable for freesurfer - for use in getting access to lut's
FREESURFER_HOME = os.getenv("FREESURFER_HOME") or ''
MRTRIX3_HOME = os.getenv("MRTRIX3_HOME") or ''
HOME_DIR="../../"
SCRIPTS_UTIL_DIR = "../../neuroimg/format/"
ATLAS=['dk']

parc = "aparc.a2009s"
aa = "aparc+aseg"
sval = "pial"
hemispheres = ['lh', 'rh']
resamp_target = "fsaverage5"

# First rule
rule all:
    input:
        # output_dk_voxel_file = expand(os.path.join(config["finaloutput_datadir"],
        #                                            "{patient_id}", "voxel",
        #                                "voxels_in_T1_volume_dk.txt"),
        #                                 patient_id=config['patients']),
        # output_destrieux_voxel_file = expand(os.path.join(config["finaloutput_datadir"],
        #                                            "{patient_id}", "voxel",
        #                                             "voxels_in_T1_volume_destrieux.txt"),
        #                               patient_id=config['patients']),
        # master output file
        output_file=expand(os.path.join(config['finaloutput_datadir'],
                                                "{patient_id}",
                                                "tvb/connectivity.zip"), patient_id=config['patients']),
        # coregistered CT to T1 image
        # CT_IN_T1_NIFTI_IMG=expand(os.path.join(config['finaloutput_datadir'],
        #                                     "{patient_id}",
        #                                     "coregistration",
        #                                  "CT_IN_T1.RAS.RO.nii.gz"),
        #                             patient_id=config['patients']),
        CT_IN_T1_NIFTI_IMG_ORIG = expand(os.path.join(config['finaloutput_datadir'],
                                               "{patient_id}",
                                               "coregistration",
                                               "CT_IN_T1.nii"),
                                         patient_id=config['patients']),
        # mapping matrix for CT to T1
        # MAPPING_FILE=expand(os.path.join(config['finaloutput_datadir'],
        #                                 "{patient_id}",
        #                                  "coregistration",
        #                                 "fsl_ct-to-t1_omat.RAS.RO.txt"),
        #                             patient_id=config['patients']),
        # label in source lut volume
        label_volume_file = expand(os.path.join(config['finaloutput_datadir'],
                                                 "{patient_id}",
                                                 "tvb",
                                                 "label_in_T1_volume.{atlas}.nii.gz"),
                                            patient_id=config['patients'], atlas=ATLAS),
        # annotation subsampled file
        output_subsampled_annotfile = expand(os.path.join(config['finaloutput_datadir'],
                                                        "{patient_id}",
                                                        "{hemisphere}."+parc+".annot."+resamp_target),
                                             hemisphere=hemispheres,
                                             patient_id=config['patients']),
        # surface subsampled file
        output_subsampled_surffile = expand(os.path.join(config['finaloutput_datadir'],
                                                        "{patient_id}",
                                                        "{hemisphere}."+sval+"."+resamp_target),
                                            hemisphere = hemispheres,
                                            patient_id=config['patients']),
    shell:
        "echo 'done'"

"""
Rule for converting .dicom -> .nifti

Assumes user has premri and postct with DTI being optional, as this is not standard clinical procedure
in the USA.
"""
rule dicom_to_nifti:
    # input:
    #     single_ct_dicom = os.path.join(config['rawdatadir'],
    #                              "{patient_id}", 'postct', '0000.dcm'),
    #     single_mri_dicom = os.path.join(config['rawdatadir'],
    #                               "{patient_id}", 'premri', '0000.dcm'),
    params:
        CT_FOLDER=os.path.join(config['rawdatadir'],
                                        "{patient_id}", 'postct'),
        MRI_FOLDER=os.path.join(config['rawdatadir'],
                                        "{patient_id}", 'premri'),
        DTI_FOLDER=os.path.join(config['rawdatadir'],
                                        "{patient_id}", "dti"),

        DTI_NIFTI_IMG = os.path.join(config['fs_outputdatadir'],
                                        "{patient_id}_DTI.nii.gz")
    output:
        CT_NIFTI_IMG=os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}",
                                         "CT.nii.gz"),
        MRI_NIFTI_IMG=os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}",
                                          "T1.nii.gz")
    shell:
        "echo {params};"
        "mrconvert {params.CT_FOLDER} {output.CT_NIFTI_IMG}; \
        mrconvert {params.MRI_FOLDER} {output.MRI_NIFTI_IMG};"

        # "mrconvert {params.DTI_FOLDER} {params.DTI_NIFTI_IMG};"


"""
Runs a preconversion for all image volumes into the same coordinate space.
"""
"""
Rule for converting coordinate systems to:

    RAS, Talairach.

Also converts img orientations to a standard template orientation via FSL.

Make sure you read up on the conversion systems to make sure that each part of pipeline 
assumes the right coordinate system.

Reference: https://www.slicer.org/wiki/Coordinate_systems
"""
rule convert_coordinate_system_raw:
    input:
        raw_ct_file = os.path.join(config['finaloutput_datadir'],
                                   "{patient_id}",
                                   "CT.nii.gz"),
        raw_mri_file = os.path.join(config['finaloutput_datadir'],
                                    "{patient_id}",
                                    "T1.nii.gz"),
        talairach_transform_file = os.path.join(config['finaloutput_datadir'],
                                                "{patient_id}",
                                                "transforms/talairach.xfm"),
    output:
        ras_mri_volume = os.path.join(config['finaloutput_datadir'],
                                      "{patient_id}",
                                      "converted_coord_system",
                                      "T1.RAS.nii.gz"),
        tal_mri_volume = os.path.join(config['finaloutput_datadir'],
                                      "{patient_id}",
                                      "converted_coord_system",
                                      "T1.TAL.nii.gz"),
        ras_ct_volume = os.path.join(config['finaloutput_datadir'],
                                     "{patient_id}",
                                     "converted_coord_system",
                                     "CT.RAS.nii.gz"),
        tal_ct_volume = os.path.join(config['finaloutput_datadir'],
                                     "{patient_id}",
                                     "converted_coord_system",
                                     "CT.TAL.nii.gz"),

    shell:
        # convert mri and ct volumes to RAS and TAL
        "echo 'Running on original images!';"
        "mri_convert -rt nearest --out_orientation RAS {input.raw_ct_file} {output.ras_ct_volume};"
        "mri_convert -rt nearest --out_orientation RAS {input.raw_mri_file} {output.ras_mri_volume};"
        "mri_convert {input.raw_ct_file} --apply_transform {input.talairach_transform_file} -oc 0 0 0 {output.tal_ct_volume};"
        "mri_convert {input.raw_mri_file} --apply_transform {input.talairach_transform_file} -oc 0 0 0 {output.tal_mri_volume};"

rule reorient_raw_coordinate_system:
    input:
        ras_mri_volume = os.path.join(config['finaloutput_datadir'],
                                      "{patient_id}",
                                      "converted_coord_system",
                                      "T1.RAS.nii.gz"),
        ras_ct_volume = os.path.join(config['finaloutput_datadir'],
                                     "{patient_id}",
                                     "converted_coord_system",
                                     "CT.RAS.nii.gz"),
    output:
        ras_ct_std_volume = os.path.join(config['finaloutput_datadir'],
                                         "{patient_id}",
                                         "converted_coord_system",
                                         "T1.RAS.RO.nii.gz"),
        ras_mri_std_volume = os.path.join(config['finaloutput_datadir'],
                                          "{patient_id}",
                                          "converted_coord_system",
                                          "CT.RAS.RO.nii.gz"),
    shell:
        # reorient to a standardized format
        "fslreorient2std {input.ras_ct_volume} {output.ras_ct_std_volume};"
        "fslreorient2std {input.ras_mri_volume} {output.ras_mri_std_volume};"

rule convert_coordinate_system_T1mgz:
    input:
        mgz_mri_file = os.path.join(config['finaloutput_datadir'],
                                    "{patient_id}",
                                    "T1.mgz"),
        talairach_transform_file = os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}",
                                        "transforms/talairach.xfm"),
    output:
        mgz_mri_ras_volume = os.path.join(config['finaloutput_datadir'],
                                          "{patient_id}",
                                          "converted_coord_system",
                                          "T1.mgz.RAS.nii.gz"),
        mgz_mri_tal_volume = os.path.join(config['finaloutput_datadir'],
                                          "{patient_id}",
                                          "converted_coord_system",
                                          "T1.mgz.TAL.nii.gz"),

        mgz_mri_ras_std_volume = os.path.join(config['finaloutput_datadir'],
                                          "{patient_id}",
                                          "converted_coord_system",
                                          "T1.mgz.RAS.RO.nii.gz"),
    shell:
        "mri_convert -rt nearest --out_orientation RAS {input.mgz_mri_file} {output.mgz_mri_ras_volume};"
        "mri_convert {input.mgz_mri_file} --apply_transform {input.talairach_transform_file} -oc 0 0 0 {output.mgz_mri_tal_volume};"

        "fslreorient2std  {output.mgz_mri_ras_volume} {output.mgz_mri_ras_std_volume};"


"""
Rule to pre-setup the freesurfer output directory with the orig.mgz file
"""
rule pre_reconstruction:
    input:
        MRI_NIFTI_IMG=os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}",
                                          "T1.nii.gz")
    params:
        patient="{patient_id}", # patient_id=config['patients']),
        SUBJECTS_DIR=os.path.join(config['fs_outputdatadir']),
    output:
        outmgz_file=os.path.join(config['fs_outputdatadir'],
                                     "{patient_id}",
                                    "mri/orig",
                                     "001.mgz")
    shell:
        "export SUBJECTS_DIR={params.SUBJECTS_DIR}; \
            SUBJECTS_DIR={params.SUBJECTS_DIR};"
        "mri_convert {params.MRI_NIFTI_IMG} {output.outmgz_file};"



"""
Rule for reconstructions .nifti -> output files.

Since Freesurfer creates the directory on its own + snakemake does too, 
I instead specify an output as a "temporary" flagger file that will let snakemake
know that reconstruction was completed.
"""
rule reconstruction:
    input:
        MRI_NIFTI_IMG=os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}",
                                          "T1.nii.gz")
        # outmgz_file = os.path.join(config['fs_outputdatadir'],
        #                    "{patient_id}",
        #                    "mri/orig",
        #                    "001.mgz")
    params:
        patient="{patient_id}", # patient_id=config['patients']),
        SUBJECTS_DIR=os.path.join(config['fs_outputdatadir']),
    output:
        outsuccess_file=os.path.join(config['fs_outputdatadir'],
                                "{patient_id}_recon_success.txt")
    shell:
        "export SUBJECTS_DIR={params.SUBJECTS_DIR}; \
            SUBJECTS_DIR={params.SUBJECTS_DIR};"

        "recon-all -i {input.MRI_NIFTI_IMG} \
            -subjid {params.patient} -all \
            -parallel -openmp 4;"

        "touch {output.outsuccess_file}"

"""
Rule for extracting the subcortical regions

- creates a new folder aseg2srf inside the fs_output data directory
- c/p this into our final result directory
"""
rule create_subcortical_volume:
    input:
        aseg_output_file=os.path.join(config['finaloutput_datadir'],
                                     "{patient_id}",
                                    "aseg.mgz"),
        norm_output_file=os.path.join(config['finaloutput_datadir'],
                                     "{patient_id}",
                                    "norm.mgz"),
    params:
        new_FREESURFER_HOME=os.path.join(config['finaloutput_datadir'],
                                            "{patient_id}"),
        subj_dir=os.path.join(config['fs_outputdatadir']),
        patient="{patient_id}", 
        scripts_dir=SCRIPTS_UTIL_DIR
    output:
        subcort_success_flag_file=os.path.join(config['finaloutput_datadir'],
                                            "{patient_id}",
                                            "{patient_id}_subcort_success.txt"),
    shell:
        # generate subcortical region volume bounding surfaces
        "export SUBJECTS_DIR={params.subj_dir}; \
        SUBJECTS_DIR={params.subj_dir}; \
	    {params.scripts_dir}/aseg2srf -s {params.patient};"

        "cp -r {params.subj_dir}/{params.patient}/aseg2srf/ {params.new_FREESURFER_HOME}/aseg2srf; \
        touch {output.subcort_success_flag_file}; "

"""
Rule for converting the pial surfaces to ascii data, so that it is readable by python/matlab.
"""
rule convert_pial_surface_files:
    input:
        lhpial=os.path.join(config['finaloutput_datadir'],
                            "{patient_id}",
                            "lh.pial"),
        rhpial=os.path.join(config['finaloutput_datadir'],
                            "{patient_id}",
                            "rh.pial"),
    output:
        lhpial=os.path.join(config['finaloutput_datadir'],
                            "{patient_id}",
                            "lh.pial.asc"),
        rhpial=os.path.join(config['finaloutput_datadir'],
                            "{patient_id}",
                            "rh.pial.asc")
    shell:
        "mris_convert {input.lhpial} {output.lhpial};"
        "mris_convert {input.rhpial} {output.rhpial};"

"""
Rule for coregistering .nifit images -> .nifti for T1 space

E.g. useful for CT, and DTI images to be coregistered
"""
rule coregister_ct_to_t1:
    input:
        # output_subsampled_file=os.path.join(config['fs_outputdatadir'],
        #                         config['finaloutput_datadir'],
        #                         "{patient_id}",
        #                         "subsampled_T1.mgz"),
        CT_NIFTI_IMG_ORIG = os.path.join(config['finaloutput_datadir'],
                                    "{patient_id}",
                                    "CT.nii.gz"),
        MRI_NIFTI_IMG_ORIG = os.path.join(config['finaloutput_datadir'],
                                     "{patient_id}",
                                     "T1.nii.gz"),
        CT_NIFTI_IMG=os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}",
                                        "converted_coord_system",
                                         "CT.RAS.RO.nii.gz"),
        MRI_NIFTI_IMG=os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}",
                                        "converted_coord_system",
                                          "T1.RAS.RO.nii.gz")
        # tal_label_volume = os.path.join(config['finaloutput_datadir'],
        #                         "{patient_id}",
        #                         "tal_{atlas}.nii.gz"),
    output:
        CT_IN_T1_NIFTI_IMG_ORIG_gz=os.path.join(config['finaloutput_datadir'],
                                            "{patient_id}",
                                            "coregistration",
                                         "CT_IN_T1.nii.gz"),
        CT_IN_T1_NIFTI_IMG_ORIG = os.path.join(config['finaloutput_datadir'],
                                       "{patient_id}",
                                       "coregistration",
                                       "CT_IN_T1.nii"),
        # mapping matrix for CT to T1
        MAPPING_FILE_ORIG = os.path.join(config['finaloutput_datadir'],
                                    "{patient_id}",
                                    "coregistration",
                                    "fsl_ct-to-t1_omat.txt"),
        CT_IN_T1_NIFTI_IMG=os.path.join(config['finaloutput_datadir'],
                                            "{patient_id}",
                                            "coregistration",
                                         "CT_IN_T1.RAS.RO.nii.gz"),
        # mapping matrix for CT to T1
        MAPPING_FILE=os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}",
                                        "coregistration",
                                        "fsl_ct-to-t1_omat.RAS.RO.txt"),
    shell:
        "flirt -in {input.CT_NIFTI_IMG} -ref {input.MRI_NIFTI_IMG} -omat {output.MAPPING_FILE} -out {output.CT_IN_T1_NIFTI_IMG};"
        "flirt -in {input.CT_NIFTI_IMG_ORIG} -ref {input.MRI_NIFTI_IMG_ORIG} -omat {output.MAPPING_FILE_ORIG} -out {output.CT_IN_T1_NIFTI_IMG_ORIG_gz};"
        "mrconvert {output.CT_IN_T1_NIFTI_IMG_ORIG_gz} {output.CT_IN_T1_NIFTI_IMG_ORIG};"

"""
Rule for extracting surface geometry information from the 
MRI volumes
"""
rule create_structural_dataset:
    input:
        subcort_success_flag_file=os.path.join(config['finaloutput_datadir'],
                                    "{patient_id}",
                                    "{patient_id}_subcort_success.txt"),
        lhpial=os.path.join(config['finaloutput_datadir'],
                            "{patient_id}",
                            "lh.pial.asc"),
        rhpial=os.path.join(config['finaloutput_datadir'],
                            "{patient_id}",
                            "rh.pial.asc"),
        lhlabel=os.path.join(config['finaloutput_datadir'],
                            "{patient_id}",
                            "lh.aparc.annot"),
        rhlabel=os.path.join(config['finaloutput_datadir'],
                            "{patient_id}",
                            "rh.aparc.annot"),
    params:
        subjdir=os.path.join(config['fs_outputdatadir'], "{patient_id}"),
        output_surface_dir=os.path.join(config['fs_outputdatadir'],
                                        "{patient_id}",
                                        "tvb"),
        lut_fs=os.path.join(FREESURFER_HOME, "FreeSurferColorLUT.txt"),
        lut_target=os.path.join(MRTRIX3_HOME, "share/mrtrix3/labelconvert/fs_default.txt"),
        scripts_dir=os.path.join(SCRIPTS_UTIL_DIR)
    output:
        output_file=os.path.join(config['finaloutput_datadir'],
                                "{patient_id}",
                                "tvb/connectivity.zip")
    shell:
        "echo 'RUNNING CREATION OF FINAL FILES...'; \
        cd {params.scripts_dir};"

        "touch {output.output_file};"
        # "python -m create_surface_files {params.subjdir} \
        #         {params.lut_fs} \
        #         {params.lut_target} \
        #         {output.output_file} \
        #         {params.output_surface_dir};"

"""
Rule for subsampling the surface geometry.

Lowers computation time and also provides regularization approach when doing 
co-registration via flirt. Subsample -> get gross structures and then coregister with initial first

rtd = resampled-data

--srcsubject Name of source subject. As found in $SUBJECTS_DIR or ico for icosahedron. The input data must have been sampled onto this subject's surface (eg, using mri_vol2surf)

--srcsurfval Name of file where the data on the source surface is located.

--trgsubject ame of target subject as found in $SUBJECTS_DIR or ico for icosahedron.

--trgsurfval Name of file where the data on the target surface will be stored.

--hemi (lh or rh)


"""

rule subsample_surface:
    input:
        outsuccess_file=os.path.join(config['fs_outputdatadir'],
                                "{patient_id}_recon_success.txt"),
        ras_mri_volume = os.path.join(config['finaloutput_datadir'],
                                      "{patient_id}",
                                      "converted_coord_system",
                                      "T1.RAS.nii.gz"),
        tal_mri_volume = os.path.join(config['finaloutput_datadir'],
                                      "{patient_id}",
                                      "converted_coord_system",
                                      "T1.TAL.nii.gz"),
        ras_ct_volume = os.path.join(config['finaloutput_datadir'],
                                     "{patient_id}",
                                     "converted_coord_system",
                                     "CT.RAS.nii.gz"),
        tal_ct_volume = os.path.join(config['finaloutput_datadir'],
                                     "{patient_id}",
                                     "converted_coord_system",
                                     "CT.TAL.nii.gz"),
        mgz_mri_ras_volume = os.path.join(config['finaloutput_datadir'],
                                          "{patient_id}",
                                        "converted_coord_system",
                                          "T1.mgz.RAS.nii.gz"),
        mgz_mri_tal_volume = os.path.join(config['finaloutput_datadir'],
                                          "{patient_id}",
                                          "converted_coord_system",
                                        "T1.mgz.TAL.nii.gz"),
    params:
        patient="{patient_id}",
        SUBJECTS_DIR=os.path.join(config['fs_outputdatadir']),
        resamp_target = resamp_target,
        parc = parc,
        aa = aa,
        sval = sval,
        hemisphere="{hemisphere}",
        resamp_output_labelpath = os.path.join(config['fs_outputdatadir'],
                                        '{patient_id}'),
        output_annotfile = os.path.join(config['fs_outputdatadir'],
                                            "{patient_id}",
                                            "label",
                                            "{hemisphere}." + parc + ".annot." + resamp_target),
        output_surffile = os.path.join(config['fs_outputdatadir'],
                                           "{patient_id}",
                                            "surf",
                                           "{hemisphere}." + sval + "." + resamp_target),
        t1_mgz_file = os.path.join(config['fs_outputdatadir'],
                                            "{patient_id}",
                                            "mri/T1.mgz")
    output:
        output_subsampled_annotfile=os.path.join(config['finaloutput_datadir'],
                                                "{patient_id}",
                                                "{hemisphere}." + parc + ".annot." + resamp_target),
        output_subsampled_surffile = os.path.join(config['finaloutput_datadir'],
                                                   "{patient_id}",
                                                   "{hemisphere}." + sval + "." + resamp_target),
    shell: # {params.src_subject} \# {input.aseg_output_file} \
        # This first command, subsamples the pial data for a hemisphere
        # -> uses a target pial surface to get mapped onto it.
        # -> stores in trg/surf
        "echo $SUBJECTS_DIR;"
          "mri_surf2surf \
            --srcsubject {params.patient} \
            --trgsubject {params.resamp_target} \
            --hemi {params.hemisphere} \
            --sval-xyz {params.sval} \
            --tval {params.sval}.{params.patient} \
            --tval-xyz {params.t1_mgz_file}; "

        # copies resampled file over to our original subjects directory
          "echo '{params.SUBJECTS_DIR}/{params.resamp_target}/surf/{params.hemisphere}.{params.sval}.{params.patient} \
                {params.SUBJECTS_DIR}/{params.patient}/surf/{params.hemisphere}.{params.sval}.{params.resamp_target}';"
          "cp {params.SUBJECTS_DIR}/{params.resamp_target}/surf/{params.hemisphere}.{params.sval}.{params.patient} \
                {params.SUBJECTS_DIR}/{params.patient}/surf/{params.hemisphere}.{params.sval}.{params.resamp_target};"
          
        # sub-samples the annotations accordingly
          "mri_surf2surf \
            --srcsubject {params.patient} \
            --trgsubject {params.resamp_target} \
            --hemi {params.hemisphere} \
            --sval-annot {params.resamp_output_labelpath}/label/{params.hemisphere}.{params.parc}.annot \
            --tval {params.resamp_output_labelpath}/label/{params.hemisphere}.{params.parc}.annot.{params.resamp_target};"

        # moves files to the temporary directory
        "cp {params.output_surffile} {output.output_subsampled_surffile};"
        "cp {params.output_annotfile} {output.output_subsampled_annotfile};"

"""
Rule for converting from .nii.gz -> .nii and .mgz for easier viewing by matlab programs that can't read in 
.nii.gz

"""
rule convert_to_nii:
    input:
        ras_mri_volume = os.path.join(config['finaloutput_datadir'],
                                      "{patient_id}",
                                      "converted_coord_system",
                                      "T1.RAS.nii.gz"),
        ras_ct_volume = os.path.join(config['finaloutput_datadir'],
                                     "{patient_id}",
                                     "converted_coord_system",
                                     "CT.RAS.nii.gz"),
    output:
        ras_mri_volume = os.path.join(config['finaloutput_datadir'],
                              "{patient_id}",
                              "converted_coord_system",
                              "T1.RAS.nii"),
        ras_ct_volume = os.path.join(config['finaloutput_datadir'],
                             "{patient_id}",
                             "converted_coord_system",
                             "CT.RAS.nii"),
    shell:
        "mri_convert {input.ras_mri_volume} {output.ras_mri_volume};"
        "mri_convert {input.ras_ct_volume} {output.ras_ct_volume};"



rule convert_coordinate_system:
    input:
        raw_ct_file = os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}",
                                         "CT.nii.gz"),
        raw_mri_file = os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}",
                                          "T1.nii.gz"),
        mgz_mri_file = os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}",
                                        "T1.mgz"),
        desikan_orig_file=os.path.join(config['finaloutput_datadir'],
                                "{patient_id}",
                               "aparc.a2009s+aseg.mgz"),
        destrieux_orig_file = os.path.join(config['finaloutput_datadir'],
                                   "{patient_id}",
                                   "aparc.a2009s+aseg.mgz"),
        talairach_transform_file = os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}",
                                        "transforms/talairach.xfm"),
    output:
        ras_label_volume=os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}",
                                      "converted_coord_system",
                                        "label_{atlas}.RAS.nii.gz"),
        tal_label_volume = os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}",
                                        "converted_coord_system",
                                        "label_{atlas}.TAL.nii.gz"),
        ras_std_label_volume=os.path.join(config['finaloutput_datadir'],
                                "{patient_id}",
                                "converted_coord_system",
                                "label_{atlas}.RAS.RO.nii.gz"),
        tal_std_label_volume = os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}",
                                        "converted_coord_system",
                                        "label_{atlas}.TAL.RO.nii.gz"),
    run:
        if wildcards.atlas == "dk":
            shell("echo 'Running on desikan atlas!';")
            "echo 'mri_convert -rt nearest --out_orientation RAS {input.desikan_orig_file} \
                                                            {output.ras_label_volume}';"
            shell("mri_convert -rt nearest --out_orientation RAS {input.desikan_orig_file} \
                                                            {output.ras_label_volume};")
            shell("mri_convert {input.desikan_orig_file} --apply_transform {input.talairach_transform_file} -oc 0 0 0 {output.tal_label_volume};")

        elif wildcards.atlas == "destrieux":
            shell("echo 'Running on destrieux atlas!'")
            shell("mri_convert -rt nearest --out_orientation RAS {input.destrieux_orig_file} \
                                                            {output.ras_label_volume};")
            shell("mri_convert {input.destrieux_orig_file} --apply_transform {input.talairach_transform_file} -oc 0 0 0 {output.tal_label_volume};")

        shell("fslreorient2std  {output.ras_label_volume} {output.ras_std_label_volume};")
        shell("fslreorient2std {output.tal_label_volume} {output.tal_std_label_volume};")

"""
Rule for converting labels in one volume to another labeling system.

Used for converting FS's lookup table to flirt's lookuptable, which is easier to read.

Rule for creating a label volume file that is mapped
in our simple space of FS (0-83 or 0-255) vs the unsequential mappings.

Makes things simpler to analyze under one LUT.
"""
rule create_label_in_mri_volume:
    input:
        ras_std_label_volume=os.path.join(config['finaloutput_datadir'],
                                "{patient_id}",
                                "converted_coord_system",
                                "label_{atlas}.RAS.RO.nii.gz")
    params:
        lut_fs = os.path.join(FREESURFER_HOME, "FreeSurferColorLUT.txt"),
        lut_target = os.path.join(MRTRIX3_HOME, "share/mrtrix3/labelconvert/fs_default.txt")
    output:
        label_volume_file=os.path.join(config['finaloutput_datadir'],
                                "{patient_id}",
                                "tvb",
                                "label_in_T1_volume.{atlas}.nii.gz")
    shell:
        "labelconvert {input.ras_std_label_volume} \
                    {params.lut_fs} \
                    {params.lut_target} \
                    {output.label_volume_file};"


"""
Rule for converting labeled volume image from reconstruction to a user-friendly file
that is labeled voxel per voxel with a brain index region.
"""
rule convert_voxel_labeling:
    input:
        desikan_orig_file = os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}",
                                        "aparc+aseg.mgz"),
        destrieux_orig_file = os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}",
                                        "aparc.a2009s+aseg.mgz")
    params:
        lut_fs = os.path.join(FREESURFER_HOME, "FreeSurferColorLUT.txt"),
        lut_target = os.path.join(MRTRIX3_HOME, "share/mrtrix3/labelconvert/fs_default.txt")
    output:
        output_dk_voxel_file = os.path.join(config["finaloutput_datadir"],
                                            "{patient_id}",
                                            "voxel",
                                            "voxels_in_T1_volume_dk.txt"),
        output_destrieux_voxel_file = os.path.join(config["finaloutput_datadir"],
                                                   "{patient_id}",
                                                   "voxel",
                                                   "voxels_in_T1_volume_destrieux.txt")
    shell:
        # "cd {params.home_dir};"
        "python ./create_volume_voxel_files.py {input.desikan_orig_file} " \
                                            "{input.destrieux_orig_file} " \
                                            "{params.lut_target} " \
                                            "{output.output_dk_voxel_file} " \
                                            "{output.output_destrieux_voxel_file};"

"""
Rule to plot:
- parcellated nodes in space with the surface shown transparently
- surface shown transparent with different regions colored
- parcellated nodes in space with the contacts.xyz (centers) plotted
"""
# rule plot_results:
#     input:
#         output_file=expand(os.path.join(
#                         config['fs_outputdatadir'],
#                         config['finaloutput_datadir'],
#                         "{patient_id}",
#                         "tvb/connectivity.zip"), patient_id=config['patients']),
#     output:
#         node_figure =
#         surface_figure =
#         channels_figure =
#     shell:


# DELETE everything, so we can re-run things
rule clean:
    input:
        rawinput=config['rawdatadir'],
        output=config['fs_outputdatadir'],
        patdirs=expand(os.path.join(config['fs_outputdatadir'],
                            "{patient_id}"),
                            patient_id=config['patients'])
    # shell:
        # "rm -rf {input.patdirs}"
        
        
"""
Rule to copy all necessary reconstruction files to a temporary directory,
so that we can explicitly say which files are being analyzed/used.

Add here files to copy them to the directory that we allow scripts to draw from.
"""
rule copy_reconstruction_files:
    input:
        outsuccess_file=os.path.join(config['fs_outputdatadir'],
                                "{patient_id}_recon_success.txt")
    params:
        lhpial=os.path.join(config['fs_outputdatadir'],
                            "{patient_id}",
                            "surf/lh.pial"),
        rhpial=os.path.join(config['fs_outputdatadir'],
                            "{patient_id}",
                            "surf/rh.pial"),
        lhlabel=os.path.join(config['fs_outputdatadir'],
                            "{patient_id}",
                            "label/lh.aparc.annot"),
        rhlabel=os.path.join(config['fs_outputdatadir'],
                            "{patient_id}",
                            "label/rh.aparc.annot"),
        aseg_output_file = os.path.join(config['fs_outputdatadir'],
                                        "{patient_id}",
                                        "mri/aseg.mgz"),
        norm_output_file = os.path.join(config['fs_outputdatadir'],
                                        "{patient_id}",
                                        "mri/norm.mgz"),
        aparc_dkatlas_aseg_file = os.path.join(config['fs_outputdatadir'],
                                                 "{patient_id}",
                                                "mri/aparc+aseg.mgz"),
        aparc_atlas_aseg_file = os.path.join(config['fs_outputdatadir'],
                                                 "{patient_id}",
                                                "mri/aparc.a2009s+aseg.mgz"),
        t1_mgz_file = os.path.join(config['fs_outputdatadir'],
                        "{patient_id}",
                        "mri/T1.mgz"),
        talairach_transform_file = os.path.join(config['fs_outputdatadir'],
                                                "{patient_id}",
                                                "mri/transforms/talairach.xfm")
    output:
        lhpial=os.path.join(config['finaloutput_datadir'],
                            "{patient_id}",
                            "lh.pial"),
        rhpial=os.path.join(config['finaloutput_datadir'],
                            "{patient_id}",
                            "rh.pial"),
        lhlabel=os.path.join(config['finaloutput_datadir'],
                            "{patient_id}",
                            "lh.aparc.annot"),
        rhlabel=os.path.join(config['finaloutput_datadir'],
                            "{patient_id}",
                            "rh.aparc.annot"),
        aseg_output_file = os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}",
                                        "aseg.mgz"),
        norm_output_file = os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}",
                                        "norm.mgz"),
        aparc_atlas_aseg_file = os.path.join(config['finaloutput_datadir'],
                                             "{patient_id}",
                                             "aparc.a2009s+aseg.mgz"),
        aparc_dkatlas_aseg_file = os.path.join(config['finaloutput_datadir'],
                                             "{patient_id}",
                                            "aparc+aseg.mgz"),
        t1_mgz_file = os.path.join(config['finaloutput_datadir'],
                                        "{patient_id}",
                                        "T1.mgz"),
        talairach_transform_file = os.path.join(config['finaloutput_datadir'],
                                                "{patient_id}",
                                                "transforms/talairach.xfm")
    shell:
        "cp {params.lhpial} {output.lhpial} &\
        cp {params.rhpial} {output.rhpial} &\
        cp {params.lhlabel} {output.lhlabel} &\
        cp {params.rhlabel} {output.rhlabel} &\
        cp {params.aseg_output_file} {output.aseg_output_file} &\
        cp {params.norm_output_file} {output.norm_output_file} &\
        cp {params.aparc_atlas_aseg_file} {output.aparc_atlas_aseg_file} &\
        cp {params.aparc_dkatlas_aseg_file} {output.aparc_dkatlas_aseg_file} &\
        cp {params.t1_mgz_file} {output.t1_mgz_file};"

        "cp {params.talairach_transform_file} {output.talairach_transform_file};"
